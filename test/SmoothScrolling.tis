class SmoothScrolling : Behavior
{
    function this(params){
        this.cfg = {
            "SCROLL_DELTA" : 5.0,       // px, for mouse wheel
            "SCROLL_DECEL" : 0.95,      // 减速
            "SCROLL_OUT_DECEL" : 0.74  // 当滚动条超出边界时的减速
        }.extend(params);
        this.height = this.box(#height, #border, #self).toInteger();
        this._velocity = 0.0;
        this._isOut = false;
        this._SCROLL_STEP_DELAY = View.ANIMATION_TIMER_SPAN;    // 毫秒
        this.subscribe(mousewheel, Event.MOUSE, Event.MOUSE_WHEEL);
    }

    /**
     * 可以被重写
     * 滚轮平滑滚动动画效果每一次执行后调用此方法
     * @param  {scroll} 滚动条的top位置
     * @return
     */
    function scrollStep(scroll) {}
    /**
     * 可以被重写
     * 设置内容显示的开始及结束位置，过界自动回滚
     * 应用场景：避免顶部|底部提示在通常状态下显示
     * @return {[firstTop, lastBottom]}
     */
    function scrollArea() {
        var firstTop = this.first.box(#top, #margin, #parent);
        var lastBottom = this.last.box(#bottom, #margin, #parent);
        return (firstTop, lastBottom);
    }

    function animatefront(distance) {
        var scroll_y = this.scroll(#top);
        var target_y = scroll_y + distance;
        var target_y_half = scroll_y + distance / 2;
        var v = 1;
        this.animate(:{
            scroll_y += v;
            if (scroll_y >= target_y) {
                this.scrollTo(0, target_y, false, true);
                return 0;
            }
            this.scrollTo(0, scroll_y, false, true);
            if (scroll_y < target_y_half) ++v;
            else if (--v == 0) v = 1;
            return this._SCROLL_STEP_DELAY;
        });
    }
    function animateBack(distance) {
        var scroll_y = this.scroll(#top);
        var target_y = scroll_y + distance;
        var target_y_half = scroll_y + distance / 2;
        var v = 1;
        this.animate(:{
            scroll_y -= v;
            if (scroll_y <= target_y) {
                this.scrollTo(0, target_y, false, true);
                return 0;
            }
            this.scrollTo(0, scroll_y, false, true);
            if (scroll_y > target_y_half) ++v;
            else if (--v == 0) v = 1;
            return this._SCROLL_STEP_DELAY;
        });
    }
    function scrollEnded(firstTop, lastBottom) {
        if (this.state.animating) return;
        if (firstTop > 0) this.animatefront(firstTop);
        else if (lastBottom < this.height) this.animateBack(lastBottom - this.height);

    }
    function doScrollAnumation() {
        if (this.state.animating) return;
        var (scroll_top, firstTop, lastBottom) = 0;
        function animationStep() {
            //当出界时,让velocity迅速的降到0.5以下
            this._velocity *= this._isOut ?
                this.cfg.SCROLL_OUT_DECEL :
                this.cfg.SCROLL_DECEL;
            if (Math.abs(this._velocity) < 0.5 || this.stopAnimation) {
                this.post(::this.scrollEnded(firstTop, lastBottom));
                //返回0 结束动画
                return 0;
            }
            scroll_top = this.scroll(#top) + this._velocity.toInteger();
            this.scrollTo(0, scroll_top, false, true);
            this.scrollStep(scroll_top);
            //判断是否出界
            (firstTop, lastBottom) = this.scrollArea();
            this._isOut = false;
            if (firstTop > 0 || lastBottom < this.height) this._isOut = true;
            return this._SCROLL_STEP_DELAY;
        }
        this.animate(animationStep);
    }
    function mousewheel(evt) {
        if (evt.wheelDelta < 0) {
            //下滚(滚轮向内滚动)
            this._velocity += this.cfg.SCROLL_DELTA;
        } else {
            //上滚(滚轮向外滚动)
            this._velocity -= this.cfg.SCROLL_DELTA;
        }
        // this : container
        this.doScrollAnumation();
        return true;
    }

}