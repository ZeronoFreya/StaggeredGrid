include "SmoothScrolling.tis";

class StaggeredGrid : SmoothScrolling
{
    function init(params){
        this.cfg = {
            baseW       : 270,
            bufferSize  : 100,
            offset      : 100,               // 距离offset时就响应pumpBefore或pumpAfter
            spacing     : 10,
            creatEnd    : function(){}      // 子节点创建完成后执行的操作
        }.extend(params);
        this.template = this.first;
        assert this.template;
        this._VL = {
            "top"           : this.box(#top, #border, #view).toInteger(),
            "height"        : this.box(#height, #border, #self).toInteger(),
            "minColumnH"   : 0,
            "maxColumnMt"  : 0,
            "column"        : {}
        };
        this.cache = [];
        this.ghost = [];
        this.scrollPos = 0;
        this.clear();
        this.initStaggeredGrid();
        super(this.cfg);
    }
    // property value(v) {
    //   get {
    //     for( var el in this.group )
    //       if( el.state.checked )
    //         return el.attributes["value"];
    //   }
    //   set {
    //     for( var el in this.group )
    //       el.state.checked = el.attributes["value"] == v;
    //   }
    // }
    /**
     * 垃圾回收器
     */
    function dogc() { gc(); }

    /**
     * 重写 SmoothScrolling.scrollArea
     * 设置内容显示的开始及结束位置，过界自动回滚
     * 应用场景：避免顶部|底部提示在通常状态下显示
     * @return {[firstTop, lastBottom]}
     */
    function scrollArea(){
        var firstTop = this.scrollmain.box(#top, #border, #parent);
        var lastBottom = this.scrollmain.box(#bottom, #border, #parent);
        return (firstTop, lastBottom);
    }
    /**
     * 重写 SmoothScrolling.scrollStep
     * 滚轮平滑滚动动画效果每一次执行后调用此方法
     * @param  {scroll} 滚动条的top位置
     * @return
     */
    function scrollStep(scroll) {
        if ( this.scrollPos > scroll && scroll - this.cfg.offset < this._VL["maxColumnMt"] ) {
            //内容下移(滚轮向外滚动)
            stdout.println("up",scroll);
            this.pumpBefore();
            // cfg.container.update();
            this.setMargin();
        }else if( this.scrollPos < scroll && scroll + this._VL.height + this.cfg.offset > this._VL["minColumnH"] ){
            //内容上移(滚轮向内滚动)
            stdout.println("dn",scroll);
            var niend = this.pumpAfter();
            // cfg.container.update();
            this.setMargin();
            if (this.records.length < 100 && niend == this.records.length ) {
                stdout.println("end");
                var records2 = [];
                for(var i=40;i<60;i++){
                    records2.push({
                        elHeight: 0
                    });
                }
                this.setValue(records2);
            }
        }
        this.scrollPos = scroll;
    }

    function recordAt(n) {
        var r = this.records[n.toInteger()];
        // if(!r && recordData ) {
        //   setupSetObserver(false, true);
        //   r = records[n] = recordData(n);
        //   setupSetObserver(true, true);
        // }
        return r;
    }
    function createRecViewer(rec) {
        var t = this.cache.pop() || this.template.clone();
        // assert !t.state.current;
        // t.data = rec;
        return t;
    }
    /**
     * 添加子节点到顶部
     * @param  el
     * @param  {[type]}
     * @return {[type]}
     */
    function prepends(el, record){
        if (record["elHeight"] && record["belongColumn"]) {
            if(record.state == 1)
                el.state.checked = true;
            var ul = this.scrollmain.$(ul[idx={record.belongColumn}]);
            ul.prepend(el);
        }
    }
    /**
     * 添加子节点到底部
     * @param  el
     * @param  {[type]}
     * @return {[type]}
     */
    function appends(el, record){
        if (record["belongColumn"]) {
            this.scrollmain.$(ul[idx={record.belongColumn}]).append(el);
            return -1;
        }
        var vc = this._VL.column;
        var min_vch = -1;
        var vch,min_idx;
        for( var idx=0; idx<vc.length; idx++){
            if ( ((vch = vc[idx.toString()].height) < min_vch) || min_vch == -1 ) {
                min_vch = vch;
                min_idx = idx;
            }
        }
        var min_vc = this.scrollmain.$(ul[idx={min_idx}]);
        min_vc.append(el);
        return min_idx.toString();
    }
    /**
     * 加载浏览过的内容
     */
    function pumpBefore() {
        function detachToCache(){
            var temp = {};
            var tempKey=[];
            var top = 0;
            var el;
            for ( var ul in this.scrollmain.$$(ul) ){
                for( el in ul.$$(li)){
                    top = el.box(#top, #border, #view) - this._VL.top;
                    if (top < this._VL.height ) continue;
                    top += ("0." + tempKey.length).toFloat();
                    temp[top] = el;
                    tempKey.push(top);
                }
                if ( el = ul.first ) {
                    el.style#margin-top = undefined;
                }
            }
            if (tempKey == []) return 0;
            tempKey = tempKey.sort();
            // stdout.println("tempKey",tempKey);
            var c = Integer.min( this.ghost.length, tempKey.length );
            for( var i=tempKey.length-1; i>=tempKey.length-c; i-- ){
                el = temp[tempKey[i]];
                // el.state.checked = false;
                if(!el.root) return 0;
                this.cache.push(el);
                el.detach();
                el.state.clear(0xFFFFFFFF); // clear all flags
            }
            this.timer(1s,dogc);
            return c;
        }
        // stdout.println("pumpBefore");
        var detach_length = detachToCache.call(this);
        var list_length = this.cfg.bufferSize - detach_length;
        var idx = 0;
        var rec,t;
        for(var i=0; i<detach_length; i++){
            idx = this.ghost.pop().toInteger();
            rec = this.recordAt(idx);
            t = this.createRecViewer(rec);
            t.@#idx = idx;
            this.prepends(t, rec);
            // setupRecordObserver(rec,t);
            this.cfg.creatEnd(idx,rec,t);
        }
    }
    /**
     * 加载更多内容
     * @param  isFirst  第一次运行时特殊处理
     * @return niend    数据结束读取的下标
     */
    function pumpAfter(isFirst = 0){
        // 缓存前半部并返回缓存数量
        function detachToCache(){
            var temp = {};
            var tempKey=[];
            var bottom = 0;
            var el;
            // 遍历每一列
            for ( var ul in this.scrollmain.$$(ul) ){
                // 遍历当前列中所有节点
                for( el in ul.$$(li)){
                    bottom = el.box(#bottom, #border, #view) - this._VL.top;
                    if (bottom > 0) break;
                    bottom += ("0." + tempKey.length).toFloat();
                    temp[bottom] = el;
                    tempKey.push(bottom);
                }
            }
            if (tempKey == []) return 0;
            tempKey = tempKey.sort();
            var c = Integer.min( this.records.length-this.ghost.length-this.cfg.bufferSize, tempKey.length );
            for( var i=0; i<c; i++ ){
                el = temp[tempKey[i]];
                if(!el.root) return 0;
                this.ghost.push( el.@#idx );
                el.style#margin-top = undefined;
                // el.state.checked = false;
                this.cache.push(el);
                el.detach();
                el.state.clear(0xFFFFFFFF); // clear all flags
            }
            this.timer(1s,this.dogc);     // throttle GC call as DOM object may hold various native resources
            return c;
        }
        // var detach_length = detachToCache();
        var list_length = isFirst ? 0 : ( this.cfg.bufferSize - detachToCache.call(this) );
        // 数据开始读取的下标
        var ni = Integer.min( this.ghost.length + list_length, this.records.length );
        // 数据结束读取的下标
        var niend = Integer.min(ni + this.cfg.bufferSize - list_length, this.records.length);
        var vc = this._VL.column;
        var (elHeight,belongColumn) = 0;
        var rec,t;
        for( var i = ni; i < niend; ++i ){
            // 获取传入的节点参数
            rec = this.recordAt(i);
            // 从缓存中获取detach节点或创建新节点
            t = this.createRecViewer(rec);
            t.@#idx = i;
            // 添加节点到DOM并返回添加的位置
            belongColumn = this.appends(t, rec);
            this.cfg.creatEnd(i,rec,t);
            // 记录节点位置信息
            if ( rec["belongColumn"] ) continue;
            elHeight = t.box(#height, #border, #self).toInteger();
            rec["top"] = vc[belongColumn].height;
            vc[belongColumn].height += elHeight+this.cfg.spacing;
            rec["elHeight"] = elHeight;
            rec["belongColumn"] = belongColumn;
        }
        return niend;
    }
    /**
     * 设置 MarginTop 代替被移除的节点，防止内容塌陷
     */
    function setMargin() {
        var el,marginTop;
        this._VL["maxColumnMt"] = 0;
        this._VL["minColumnH"] = -1;
        var h = 0;
        var rec;
        for ( var ul in this.scrollmain.$$(ul) ){
            // 获取第一个节点距父节点的距离，即为需要设置的 marginTop
            el = ul.first;
            assert el;
            marginTop = this.recordAt( el.@#idx ).top;
            el.style#margin-top = px(marginTop);
            // 获取最大的 marginTop
            this._VL["maxColumnMt"] = Integer.max( this._VL["maxColumnMt"], marginTop );
            // cfg.container.update();
            // 获取最小列的高度
            // h = ul.box(#height, #border, #self).toInteger();
            // h = this._VL.column[ul.@#idx].height;
            rec = this.recordAt( ul.last.@#idx );
            h = rec.top.toInteger() + rec.elHeight.toInteger();
            // stdout.println("hh",h, this._VL.column[ul.@#idx].height, lth);
            if ( h < this._VL["minColumnH"] || this._VL["minColumnH"] == -1 ) {
                this._VL["minColumnH"] = h;
            }
        }
    }
    /**
     * 初始化瀑布流布局
     */
    function initStaggeredGrid(){
        // 获取容器的宽高
        var (ct_w, ct_h) = this.box(#dimension, #inner);
        // 基于 baseW 计算瀑布流的列数
        var column_count = Math.floor( ct_w / this.cfg.baseW.toFloat() + 0.5 ).toInteger();
        // 基于列数计算每一列的宽度
        var column_width = Math.floor( ( ct_w + this.cfg.spacing.toFloat() ) / column_count - this.cfg.spacing );
        this.style#flow = "vertical";
        // 创建顶部提示
        this.scrolltop = this.$append(<div.scrolltop>已经到顶了</div>);
        // 瀑布流展示容器
        this.scrollmain = Element.create{div,class:"scrollmain"};
        this.append(this.scrollmain);
        this.scrollmain.style.set{ flow : "horizontal", border-spacing : px(this.cfg.spacing) };
        var el;
        for( var i=0; i<column_count; i++ ){
            this.scrollmain.insert( el = Element.create{ ul, idx:i } );
            el.style.set{ width : px(column_width), border-spacing : px(this.cfg.spacing) };
            this._VL.column[i.toString()] = {height : 0};
        }
        // 创建底部提示
        this.scrollbottom = this.$append(<div.scrollbottom>没有更多了</div>);
    }
    /**
     * 填充数据
     * @param  v
     * @return {[type]}
     */
    function setValue( v ){
        if ( this.records ){
            this.records = this.records.concat(v);
        }else{
            this.records = v;
            // pumpAfter.call(cfg.container, 1);
            this.pumpAfter(1);
            this.setMargin();
            var scroll_y = this.scrollmain.box(#top, #border, #parent).toInteger();
            this.scrollTo(0, scroll_y, false, true);
        }
    }
}