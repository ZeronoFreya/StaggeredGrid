include "SmoothScrolling.tis";

class StaggeredGrid : SmoothScrolling
{
    var template,_VL,scrolltop,scrollmain,scrollbottom,records,temp_tag;
    var cache = [];
    var ghost = [];
    var scrollPos = 0;
    var cfg = {
        baseW       : 270,
        bufferSize  : 100,
        container   : null,
        offset      : 100,      // 距离offset时就响应pumpBefore或pumpAfter
        spacing     : 10,
        creatEnd    : function(){}
    };
    function this(params){
        cfg.extend(params);
        assert cfg.container;
        template = cfg.container.first;
        assert template;
        temp_tag = template.tag;
        _VL = {
            "top" : cfg.container.box(#top, #border, #view).toInteger(),
            "height" : cfg.container.box(#height, #border, #self).toInteger(),
            "minColumnH" : 0,
            "maxColumnMt" : 0,
            "column" :{}
        };
        cfg.container.clear();
        this.initStaggeredGrid();
        super(cfg.container);
    }
    function dogc() { gc(); }

    function scrollArea(){
        var firstTop = scrollmain.box(#top, #border, #parent);
        var lastBottom = scrollmain.box(#bottom, #border, #parent);
        return (firstTop, lastBottom);
    }
    function scrollStep(scroll) {
        if ( scrollPos > scroll && scroll - cfg.offset < _VL["maxColumnMt"] ) {
            //内容下移(滚轮向外滚动)
            stdout.println("up",scroll);
            pumpBefore();
            // cfg.container.update();
            setMargin();
        }else if( scrollPos < scroll && scroll + _VL.height + cfg.offset > _VL["minColumnH"] ){
            //内容上移(滚轮向内滚动)
            stdout.println("dn",scroll);
            var niend = pumpAfter();
            // cfg.container.update();
            setMargin();
            if (records.length < 100 && niend == records.length ) {
                stdout.println("end");
                var records2 = [];
                for(var i=40;i<60;i++){
                    records2.push({
                        elHeight: 0
                    });
                }
                cfg.container.appendVal = records2;
            }
        }
        scrollPos = scroll;
    }

    function recordAt(n) {
        var r = records[n.toInteger()];
        // if(!r && recordData ) {
        //   setupSetObserver(false, true);
        //   r = records[n] = recordData(n);
        //   setupSetObserver(true, true);
        // }
        return r;
    }
    function createRecViewer(rec) {
        var t = cache.pop() || template.clone();
        // assert !t.state.current;
        // t.data = rec;
        return t;
    }
    function prepends(el, record){
        if (record["elHeight"] && record["belongColumn"]) {
            if(record.state == 1)
                el.state.checked = true;
            var ul = scrollmain.$(ul[idx={record.belongColumn}]);
            ul.prepend(el);
        }
    }
    function appends(el, record){
        if (record["belongColumn"]) {
            scrollmain.$(ul[idx={record.belongColumn}]).append(el);
            return -1;
        }
        var vc = _VL.column;
        var min_vch = -1;
        var vch,min_idx;
        for( var idx=0; idx<vc.length; idx++){
            if ( ((vch = vc[idx.toString()].height) < min_vch) || min_vch == -1 ) {
                min_vch = vch;
                min_idx = idx;
            }
        }
        var min_vc = scrollmain.$(ul[idx={min_idx}]);
        min_vc.append(el);
        return min_idx.toString();
    }
    function pumpBefore() {
        function detachToCache(){
            var temp = {};
            var tempKey=[];
            var top = 0;
            var el;
            for ( var ul in scrollmain.$$(ul) ){
                for( el in ul.$$(li)){
                    top = el.box(#top, #border, #view) - _VL.top;
                    if (top < _VL.height ) continue;
                    top += ("0." + tempKey.length).toFloat();
                    temp[top] = el;
                    tempKey.push(top);
                }
                if ( el = ul.first ) {
                    el.style#margin-top = undefined;
                }
            }
            if (tempKey == []) return 0;
            tempKey = tempKey.sort();
            // stdout.println("tempKey",tempKey);
            var c = Integer.min( ghost.length, tempKey.length );
            for( var i=tempKey.length-1; i>=tempKey.length-c; i-- ){
                el = temp[tempKey[i]];
                // el.state.checked = false;
                if(!el.root) return 0;
                cache.push(el);
                el.detach();
                el.state.clear(0xFFFFFFFF); // clear all flags
            }
            cfg.container.timer(1s,dogc);
            return c;
        }
        // stdout.println("pumpBefore");
        var detach_length = detachToCache();
        var list_length = cfg.bufferSize - detach_length;
        var idx = 0;
        var rec,t;
        for(var i=0; i<detach_length; i++){
            idx = ghost.pop().toInteger();
            rec = recordAt(idx);
            t = createRecViewer(rec);
            t.@#idx = idx;
            prepends(t, rec);
            // setupRecordObserver(rec,t);
            cfg.creatEnd(idx,rec,t);
        }
    }
        // 加载展示内容并动态添加到尾部
    function pumpAfter(isFirst = 0){
        // 缓存前半部并返回缓存数量
        function detachToCache(){
            var temp = {};
            var tempKey=[];
            var bottom = 0;
            var el;
            // 遍历每一列
            for ( var ul in scrollmain.$$(ul) ){
                // 遍历当前列中所有节点
                for( el in ul.$$(li)){
                    bottom = el.box(#bottom, #border, #view) - _VL.top;
                    if (bottom > 0) break;
                    bottom += ("0." + tempKey.length).toFloat();
                    temp[bottom] = el;
                    tempKey.push(bottom);
                }
            }
            if (tempKey == []) return 0;
            tempKey = tempKey.sort();
            var c = Integer.min( records.length-ghost.length-cfg.bufferSize, tempKey.length );
            for( var i=0; i<c; i++ ){
                el = temp[tempKey[i]];
                if(!el.root) return 0;
                ghost.push( el.@#idx );
                el.style#margin-top = undefined;
                // el.state.checked = false;
                cache.push(el);
                el.detach();
                el.state.clear(0xFFFFFFFF); // clear all flags
            }
            cfg.container.timer(1s,dogc);     // throttle GC call as DOM object may hold various native resources
            return c;
        }
        // var detach_length = detachToCache();
        var list_length = isFirst ? 0 : ( cfg.bufferSize - detachToCache() );
        // 数据开始读取的下标
        var ni = Integer.min( ghost.length + list_length, records.length );
        // 数据结束读取的下标
        var niend = Integer.min(ni + cfg.bufferSize - list_length, records.length);
        var vc = _VL.column;
        var (elHeight,belongColumn) = 0;
        var rec,t;
        for( var i = ni; i < niend; ++i ){
            // 获取传入的节点参数
            rec = recordAt(i);
            // 从缓存中获取detach节点或创建新节点
            t = createRecViewer(rec);
            t.@#idx = i;
            // 添加节点到DOM并返回添加的位置
            belongColumn = appends(t, rec);
            cfg.creatEnd(i,rec,t);
            // 记录节点位置信息
            if ( rec["belongColumn"] ) continue;
            elHeight = t.box(#height, #border, #self).toInteger();
            rec["top"] = vc[belongColumn].height;
            vc[belongColumn].height += elHeight+cfg.spacing;
            rec["elHeight"] = elHeight;
            rec["belongColumn"] = belongColumn;
        }
        return niend;
    }
    function setMargin() {
        var el,marginTop;
        _VL["maxColumnMt"] = 0;
        _VL["minColumnH"] = -1;
        var h = 0;
        var rec;
        for ( var ul in scrollmain.$$(ul) ){
            // 获取第一个节点距父节点的距离，即为需要设置的 marginTop
            el = ul.first;
            marginTop = recordAt( el.@#idx ).top;
            el.style#margin-top = px(marginTop);
            // 获取最大的 marginTop
            _VL["maxColumnMt"] = Integer.max( _VL["maxColumnMt"], marginTop );
            // cfg.container.update();
            // 获取最小列的高度
            // h = ul.box(#height, #border, #self).toInteger();
            // h = _VL.column[ul.@#idx].height;
            rec = recordAt( ul.last.@#idx );
            h = rec.top.toInteger() + rec.elHeight.toInteger();
            // stdout.println("hh",h, _VL.column[ul.@#idx].height, lth);
            if ( h < _VL["minColumnH"] || _VL["minColumnH"] == -1 ) {
                _VL["minColumnH"] = h;
            }
        }
    }
    // 初始化瀑布流布局
    function initStaggeredGrid(){
        // 获取容器的宽高
        var (ct_w, ct_h) = cfg.container.box(#dimension, #inner);
        // 基于 baseW 计算瀑布流的列数
        var column_count = Math.floor( ct_w / cfg.baseW.toFloat() + 0.5 ).toInteger();
        // 基于列数计算每一列的宽度
        var column_width = Math.floor( ( ct_w + cfg.spacing.toFloat() ) / column_count - cfg.spacing );
        cfg.container.style#flow = "vertical";
        // 创建顶部提示
        scrolltop = cfg.container.$append(<div.scrolltop>已经到顶了</div>);
        // 瀑布流展示容器
        scrollmain = Element.create{div,class:"scrollmain"};
        cfg.container.append(scrollmain);
        scrollmain.style.set{ flow : "horizontal", border-spacing : px(cfg.spacing) };
        var el;
        for( var i=0; i<column_count; i++ ){
            scrollmain.insert( el = Element.create{ ul, idx:i } );
            el.style.set{ width : px(column_width), border-spacing : px(cfg.spacing) };
            _VL.column[i.toString()] = {height : 0};
        }
        // 创建底部提示
        scrollbottom = cfg.container.$append(<div.scrollbottom>没有更多了</div>);
    }
    function append( v ){
        if ( records ){
            records = records.concat(v);
        }else{
            records = v;
            // pumpAfter.call(cfg.container, 1);
            pumpAfter(1);
            setMargin();
            var scroll_y = scrollmain.box(#top, #border, #parent).toInteger();
            cfg.container.scrollTo(0, scroll_y, false, true);
        }
    }
}